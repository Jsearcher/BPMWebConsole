#pragma checksum "D:\0P_VS Code\Webs\BPMWebConsole\BPMWebConsole\Views\Shared\Components\Statistics\BPMProcCount.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3773db5dc785822dcfdbf8b9e71b25eced1c5172"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared_Components_Statistics_BPMProcCount), @"mvc.1.0.view", @"/Views/Shared/Components/Statistics/BPMProcCount.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\0P_VS Code\Webs\BPMWebConsole\BPMWebConsole\Views\_ViewImports.cshtml"
using BPMWebConsole;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\0P_VS Code\Webs\BPMWebConsole\BPMWebConsole\Views\_ViewImports.cshtml"
using BPMWebConsole.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\0P_VS Code\Webs\BPMWebConsole\BPMWebConsole\Views\_ViewImports.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\0P_VS Code\Webs\BPMWebConsole\BPMWebConsole\Views\_ViewImports.cshtml"
using BPMWebConsole.TagHelpers;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3773db5dc785822dcfdbf8b9e71b25eced1c5172", @"/Views/Shared/Components/Statistics/BPMProcCount.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e878d076b7d40566fadf14c3a89fbd0e9e2ae031", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared_Components_Statistics_BPMProcCount : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<BPMWebConsole.Models.Source.BPMProcCount>>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-cut-key", "BPMProcCountKey", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("/lib/node_modules/chart.js/dist/Chart.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::BPMWebConsole.TagHelpers.TagHelperScriptCut __BPMWebConsole_TagHelpers_TagHelperScriptCut;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\0P_VS Code\Webs\BPMWebConsole\BPMWebConsole\Views\Shared\Components\Statistics\BPMProcCount.cshtml"
  
    string ProcDates = JsonConvert.SerializeObject(Model != null ? Model.Select(x => x.ProcDate).ToList() : null);
    string Codes = JsonConvert.SerializeObject(Model != null ? Model.Select(x => x.Airline.IATA_Code).ToList() : null);
    string Counts = JsonConvert.SerializeObject(Model != null ? Model.Select(x => x.Count).ToList() : null);
    string ChartLegends = JsonConvert.SerializeObject(Model != null ? Model.Select(x => x.Airline.Remark).ToList() : null);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            WriteLiteral("\r\n<canvas id=\"bar_chart\" height=\"0\", width=\"0\"></canvas>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3773db5dc785822dcfdbf8b9e71b25eced1c51725037", async() => {
            }
            );
            __BPMWebConsole_TagHelpers_TagHelperScriptCut = CreateTagHelper<global::BPMWebConsole.TagHelpers.TagHelperScriptCut>();
            __tagHelperExecutionContext.Add(__BPMWebConsole_TagHelpers_TagHelperScriptCut);
            __BPMWebConsole_TagHelpers_TagHelperScriptCut.CutKey = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3773db5dc785822dcfdbf8b9e71b25eced1c51726207", async() => {
                WriteLiteral("\r\n    if (");
#nullable restore
#line 14 "D:\0P_VS Code\Webs\BPMWebConsole\BPMWebConsole\Views\Shared\Components\Statistics\BPMProcCount.cshtml"
   Write(Html.Raw(ProcDates));

#line default
#line hidden
#nullable disable
                WriteLiteral(" != null && ");
#nullable restore
#line 14 "D:\0P_VS Code\Webs\BPMWebConsole\BPMWebConsole\Views\Shared\Components\Statistics\BPMProcCount.cshtml"
                                   Write(Html.Raw(Codes));

#line default
#line hidden
#nullable disable
                WriteLiteral(" != null && ");
#nullable restore
#line 14 "D:\0P_VS Code\Webs\BPMWebConsole\BPMWebConsole\Views\Shared\Components\Statistics\BPMProcCount.cshtml"
                                                               Write(Html.Raw(Counts));

#line default
#line hidden
#nullable disable
                WriteLiteral(" != null) {\r\n        let BarChart = GetBarChart();\r\n        let DataObj = { dates: ");
#nullable restore
#line 16 "D:\0P_VS Code\Webs\BPMWebConsole\BPMWebConsole\Views\Shared\Components\Statistics\BPMProcCount.cshtml"
                          Write(Html.Raw(ProcDates));

#line default
#line hidden
#nullable disable
                WriteLiteral(", codes: ");
#nullable restore
#line 16 "D:\0P_VS Code\Webs\BPMWebConsole\BPMWebConsole\Views\Shared\Components\Statistics\BPMProcCount.cshtml"
                                                       Write(Html.Raw(Codes));

#line default
#line hidden
#nullable disable
                WriteLiteral(", counts: ");
#nullable restore
#line 16 "D:\0P_VS Code\Webs\BPMWebConsole\BPMWebConsole\Views\Shared\Components\Statistics\BPMProcCount.cshtml"
                                                                                 Write(Html.Raw(Counts));

#line default
#line hidden
#nullable disable
                WriteLiteral(@" };
        BarChart.Update(DataObj);
        //$('#bar_chart')[0].canvas.parentNode.style.height = 
    }

    function GetBarChart() {
        let ctx = $('#bar_chart');

        let bar_chart = new Chart(ctx, {
            type: ""bar"",
            data: {
                labels: [],
                datasets: []
            },
            options: {
                hover: { ""animationDuration"": 0 },
                animation: {
                    onComplete: function () {
                        let chartInstance = this.chart;
                        let ctx = chartInstance.ctx;

                        ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, ""bold"", Chart.defaults.global.defaultFontFamily);
                        ctx.fillStyle = '#faa21b';
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'bottom';
                        for (let i = 0; i < this.data.datasets[0].data.length; i++) {
                   ");
                WriteLiteral(@"         let total = 0;
                            let x = ctx.canvas.width;
                            let y = ctx.canvas.height;
                            this.data.datasets.forEach((dataset) => {
                                total += dataset.data[i];
                                if (dataset._meta[0].data[i]._model.x < x) {
                                    x = dataset._meta[0].data[i]._model.x;
                                }
                                if (dataset._meta[0].data[i]._model.y < y) {
                                    y = dataset._meta[0].data[i]._model.y;
                                }
                            });
                            ctx.fillText(Number2Currency(total), x, y);
                        }
                    }
                },
                tooltips: {
                    displayColors: true,
                    mode: ""label"",
                    callbacks: {
                        label: (tooltipItem, data) => {
      ");
                WriteLiteral(@"                      let code = data.datasets[tooltipItem.datasetIndex].label;
                            let count = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                            let total = 0;
                            for (let i = 0; i < data.datasets.length; i++) {
                                total += data.datasets[i].data[tooltipItem.index];
                            }

                            if (tooltipItem.datasetIndex != data.datasets.length - 1) {
                                if (count > 0) {
                                    return code + "": "" + Number2Currency(count);
                                }
                            }
                            else {
                                if (count > 0) {
                                    return [code + "": "" + Number2Currency(count), ""Total: "" + total];
                                }
                                else {
                                    return [""To");
                WriteLiteral(@"tal: "" + total];
                                }
                            }
                        }
                    }
                },
                title: {
                    display: true,
                    fontSize: 16,
                    text: """"
                },
                scales: {
                    xAxes: [{
                        stacked: true,
                        gridLines: { display: false }
                    }],
                    yAxes: [{
                        stacked: true,
                        ticks: { beginAtZero: true },
                        type: ""linear""
                    }]
                },
                responsive: true,
                maintainAspectRatio: false,
                legend: { position: ""bottom"" }
            },
            plugins: [{
                afterDraw: chart => {
                    let ctx = chart.chart.ctx;
                    ctx.save();
                    ctx.textAlign = 'left';
 ");
                WriteLiteral(@"                   ctx.font = ""14px"";
                    ctx.fillText(""BPM數量"", 5, 15);
                    ctx.restore();
                }
            }]
        });

        var Update = (data_obj) => {
            let labels = data_obj.dates.reduce((acc, cur) => {
                if (!acc.includes(cur)) {
                    acc.push(cur);
                }
                return acc;
            }, []);
            let datasets = data_obj.codes.reduce((acc, cur, idx) => {
                let date_idx = labels.indexOf(data_obj.dates[idx]);
                let count_now = data_obj.counts[idx];
                let dataset_length = acc.length;

                let toInit = true;
                if (dataset_length !== 0) {
                    for (let i = 0; i < acc.length; i++) {
                        if (acc[i].label === cur) {
                            toInit = false;
                            acc[i].data[date_idx] = count_now;
                            break;
            ");
                WriteLiteral(@"            }
                    }
                }

                if (toInit) {
                    let dataset = { label: cur, backgroundColor: GetBGColor(dataset_length + 1), data: new Array(labels.length).fill(0) };
                    dataset.data[date_idx] = count_now;
                    acc.push(dataset);
                }
                return acc;
            }, [])
            
            bar_chart.data.labels = labels;
            bar_chart.data.datasets = datasets;
            bar_chart.update();
        };

        return {
            Chart: bar_chart,
            Update: Update
        }
    };

    function GetBGColor(idx) {
        switch (idx) {
            case 1:
                return ""#ec7063"";
            case 2:
                return ""#a569bd"";
            case 3:
                return ""#5dade2"";
            case 4:
                return ""#58d68d"";
            case 5:
                return ""#f4d03f"";
            case 6:
                ret");
                WriteLiteral("urn \"#566573\";\r\n            default:\r\n                return \"#0000ff\";\r\n        }\r\n    };\r\n");
            }
            );
            __BPMWebConsole_TagHelpers_TagHelperScriptCut = CreateTagHelper<global::BPMWebConsole.TagHelpers.TagHelperScriptCut>();
            __tagHelperExecutionContext.Add(__BPMWebConsole_TagHelpers_TagHelperScriptCut);
            __BPMWebConsole_TagHelpers_TagHelperScriptCut.CutKey = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<BPMWebConsole.Models.Source.BPMProcCount>> Html { get; private set; }
    }
}
#pragma warning restore 1591
